import type * as renraku from "renraku";
import { Id } from "dbmage";
import * as dbmage from "dbmage";
import type { Await } from "../../../../types/await.js";
import type { AccessPayload } from "../../../auth/types/auth-tokens.js";
import type { makeChatServerside } from "../../api/services/chat-serverside.js";
import type { makeChatClientside } from "../../api/services/chat-clientside.js";
import type { mockChatPersistence } from "../../api/cores/persistence/mock-chat-persistence.js";
export interface ChatMeta {
    accessToken: string;
}
export interface ChatAuth {
    access: AccessPayload;
}
export declare type ChatPolicy = (meta: ChatMeta, headers: renraku.HttpHeaders) => Promise<ChatAuth>;
export declare type ChatDraft = {
    content: string;
};
export declare type ChatPost = {
    room: string;
    nickname: string;
    postId: string;
    userId: string;
    time: number;
} & ChatDraft;
export declare type ChatPostRow = {
    room: string;
    postId: Id;
    userId: Id;
    time: number;
    nickname: string;
} & ChatDraft;
export declare type ChatMute = {
    userId: string;
};
export declare type ChatMuteRow = {
    userId: Id;
};
export declare type ChatRoomStatusRow = {
    room: string;
    status: ChatStatus;
};
export declare type ChatSchema = dbmage.AsSchema<{
    posts: ChatPostRow;
    mutes: ChatMuteRow;
    roomStatuses: ChatRoomStatusRow;
    roomUsers: {
        room: string;
        user?: Id;
        participant: boolean;
    };
}>;
export declare type ChatShape = dbmage.SchemaToShape<ChatSchema>;
export declare const chatShape: ChatShape;
export declare type ChatPersistence = Await<ReturnType<typeof mockChatPersistence>>;
export declare type ChatPersistenceActions = ReturnType<ChatPersistence["namespaceForApp"]>;
export declare type ChatServersideApi = ReturnType<typeof makeChatServerside>;
export declare type ChatClientsideApi = ReturnType<typeof makeChatClientside>;
export declare type ChatServerside = renraku.Remote<ChatServersideApi>;
export declare type ChatClientside = renraku.Remote<ChatClientsideApi>;
export interface ClientRecord {
    rooms: Set<string>;
    auth: undefined | ChatAuth;
    clientside: ChatClientside;
    controls: renraku.ConnectionControls;
}
export interface ChatConnection {
    serverside: ChatServerside;
    disconnect(): void;
}
export declare type ChatConnect = ({ clientsideApi }: {
    clientsideApi: ChatClientsideApi;
    handleDisconnect(): void;
}) => Promise<ChatConnection>;
export declare enum ChatStatus {
    Offline = 0,
    Online = 1
}
export interface ChatRoomStats {
    totalUsers: number;
    viewers: number;
    participants: number;
    moderators: number;
}
export interface StatsForChatRoom {
    [roomName: string]: ChatRoomStats;
}
export interface ChatStats {
    numberOfConnections: number;
    statsForRooms: StatsForChatRoom;
}
