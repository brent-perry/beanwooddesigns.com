import * as dbmage from "dbmage";
import { Id } from "dbmage";
import { SubscriptionPlan } from "../../../types/store-concepts.js";
import { StoreLinkedAuth } from "../../../types/store-metas-and-auths.js";
import { SubscriptionPlanRow, SubscriptionTierRow } from "../../../types/store-schema.js";
export declare const helpersForListingSubscriptions: ({ database, stripeAccountId, stripeLiaisonAccount, }: StoreLinkedAuth) => {
    fetchOurSubscriptionPlanRecords(): Promise<dbmage.ConstrainRow<{
        "namespace-appId": dbmage.Id;
    }, {
        label: string;
        planId: dbmage.Id;
        roleId: dbmage.Id;
        time: number;
        stripeAccountId: string;
        stripeProductId: string;
    }>[]>;
    crossReferencePlansWithStripeProducts(planRows: SubscriptionPlanRow[]): Promise<StripeCrossReference>;
    deletePlans(planIds: Id[]): Promise<void>;
    fetchOurRecordsOfPlanTiers(planIds: Id[]): Promise<SubscriptionTierRow[]>;
    crossReferenceTiersWithStripePrices(tierRows: SubscriptionTierRow[]): Promise<StripeCrossReference>;
    deleteTiers(tierIds: Id[]): Promise<void>;
    identifyTiersWithoutParentPlan(tierRows: SubscriptionTierRow[], presentPlanIds: Id[]): dbmage.Id[];
    dedupeIds(ids: Id[]): dbmage.Id[];
    deleteTiersWithoutParentPlan(tierIds: Id[]): Promise<void>;
    assembleSubscriptionPlans({ plans, tiers }: {
        plans: {
            rows: SubscriptionPlanRow[];
            cross: StripeCrossReference;
        };
        tiers: {
            rows: SubscriptionTierRow[];
            cross: StripeCrossReference;
        };
    }): SubscriptionPlan[];
};
export declare type BasicStripeResource = undefined | {
    active: boolean;
};
export interface StripeCrossReference {
    missingIds: Id[];
    presentIds: Id[];
    activeIds: Id[];
}
