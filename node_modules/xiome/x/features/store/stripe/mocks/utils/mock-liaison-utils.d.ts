import { Stripe } from "stripe";
import { Rando } from "dbmage";
import { MockAccount } from "../tables/types/rows/mock-account.js";
import { MockCustomer } from "../tables/types/rows/mock-customer.js";
import { MockStripeTables } from "../tables/types/mock-stripe-database.js";
import { MockSetupIntent } from "../tables/types/rows/mock-setup-intent.js";
import { MockSubscription } from "../tables/types/rows/mock-subscription.js";
import { MockPaymentMethod } from "../tables/types/rows/mock-payment-method.js";
export declare function mockLiaisonUtils({ rando, tables }: {
    rando: Rando;
    tables: MockStripeTables;
}): {
    procedures: {
        insertAccount(account: MockAccount): Promise<void>;
        insertCustomer(customer: MockCustomer): Promise<void>;
        insertSetupIntent(setupIntent: MockSetupIntent): Promise<void>;
        insertSubscription(subscription: MockSubscription): Promise<void>;
        insertPaymentMethod(paymentMethod: MockPaymentMethod): Promise<void>;
        fetchAccount(id: string): Promise<import("../tables/types/rows/custom-db/flexible-row.js").FlexibleRow<Partial<Stripe.Account>>>;
        fetchCustomer(id: string): Promise<import("../tables/types/rows/custom-db/flexible-row.js").FlexibleRow<Partial<Stripe.Customer>>>;
        fetchSubscription(id: string): Promise<import("../tables/types/rows/custom-db/flexible-row.js").FlexibleRow<Partial<Stripe.Subscription>>>;
        fetchPaymentMethod(id: string): Promise<import("../tables/types/rows/custom-db/flexible-row.js").FlexibleRow<Partial<Stripe.PaymentMethod>>>;
        fetchSetupIntent(id: string): Promise<import("../tables/types/rows/custom-db/flexible-row.js").FlexibleRow<Partial<Stripe.SetupIntent>>>;
        updateCustomer(customerId: string, customer: Partial<MockCustomer>): Promise<void>;
    };
    initializers: {
        sessionForSubscriptionPurchase({ userId, customer, subscription, }: {
            userId: string;
            customer: MockCustomer;
            subscription: MockSubscription;
        }): Partial<Stripe.Checkout.Session>;
        sessionForSubscriptionUpdate({ userId, customer, setupIntent, subscriptionId, }: {
            userId: string;
            customer: MockCustomer;
            subscriptionId: string;
            setupIntent: MockSetupIntent;
        }): Partial<Stripe.Checkout.Session>;
        account(): Promise<MockAccount>;
        customer(): Promise<MockCustomer>;
        paymentMethod(): Promise<MockPaymentMethod>;
        setupIntent({ customer, subscription, paymentMethod }: {
            customer: MockCustomer;
            subscription: MockSubscription;
            paymentMethod: MockPaymentMethod;
        }): Promise<MockSetupIntent>;
        subscription({ planId, customer, paymentMethod }: {
            planId: string;
            customer: MockCustomer;
            paymentMethod: MockPaymentMethod;
        }): Promise<MockSubscription>;
    };
};
